###############################################
# Reference notes:
# https://cloud.google.com/solutions/continuous-delivery-spinnaker-kubernetes-engine?refresh=1
# https://github.com/stefanprodan/istio-gke 
# https://rinormaloku.com/series/istio-around-everything-else/ 
###############################################

# Setup the cluster

## Weirdly failing, use 1.13.7-gke-7 until working again
k8s_version=$(gcloud container get-server-config --region=us-central1 --format=json \
| jq -r '.validNodeVersions[0]')

gcloud container clusters create istio \
--cluster-version=1.13.7-gke.8 \
--zone=us-central1-a \
--num-nodes=4 \
--machine-type=n1-standard-2 \
--preemptible \
--enable-autorepair \
--enable-autoupgrade \
--enable-ip-alias \
--scopes='https://www.googleapis.com/auth/cloud-platform'

gcloud container clusters get-credentials istio -z=us-central1-a

# Installs helm
curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash

# Sets up tiller service account
kubectl --namespace kube-system create sa tiller
kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
helm init --service-account tiller --upgrade --wait

# Setup domain name

gcloud dns managed-zones create \
--dns-name="kubernetesclustertest.com." \
--description="Istio zone" "istio"

gcloud dns managed-zones describe istio

## Neede3d? watch dig +short NS kubernetesclustertest.com

## Point your domain to google now

gcloud compute addresses create istio-gateway-ip --region us-central1

gcloud compute addresses describe istio-gateway-ip --region us-central1

DOMAIN="kubernetesclustertest.com"
## Run this first to get clusterIP GATEWAYIP=gcloud compute addresses describe istio-gateway-ip --region us-central1
GATEWAYIP=$(gcloud compute addresses describe istio-gateway-ip --region us-central1 | grep "address:" | cut -d':' -f 2 | tr -d '[:space:]')

gcloud dns record-sets transaction start --zone=istio

gcloud dns record-sets transaction add --zone=istio \
--name="${DOMAIN}" --ttl=300 --type=A ${GATEWAYIP}

gcloud dns record-sets transaction add --zone=istio \
--name="www.${DOMAIN}" --ttl=300 --type=A ${GATEWAYIP}

gcloud dns record-sets transaction add --zone=istio \
--name="*.${DOMAIN}" --ttl=300 --type=A ${GATEWAYIP}

gcloud dns record-sets transaction execute --zone istio

watch host test.kubernetesclustertest.com

#############
## Istio
#############

export ISTIO_VER="1.2.3"

helm repo add istio.io https://storage.googleapis.com/istio-release/releases/${ISTIO_VER}/charts
helm upgrade -i istio-init istio.io/istio-init --wait --namespace istio-system

kubectl -n istio-system wait --for=condition=complete job/istio-init-crd-10
kubectl -n istio-system wait --for=condition=complete job/istio-init-crd-11
kubectl -n istio-system wait --for=condition=complete job/istio-init-crd-12

# generate a random password
PASSWORD=$(head -c 12 /dev/urandom | shasum| cut -d' ' -f1)

kubectl -n istio-system create secret generic grafana \
--from-literal=username=admin \
--from-literal=passphrase="$PASSWORD"

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
type: Opaque
data:
  username: YWRtaW4=
  passphrase: YWRtaW4=
EOF

# Make sure to set static IP address in my-istio.yaml prior to running this
helm upgrade --install istio istio.io/istio \
--namespace=istio-system \
-f ./my-istio.yaml

watch kubectl -n istio-system get pods

kubectl apply -f ./ingress-gateway.yaml

GCP_PROJECT=gke-istio-tut

gcloud iam service-accounts create dns-admin \
--display-name=dns-admin \
--project=${GCP_PROJECT}

gcloud iam service-accounts keys create ./gcp-dns-admin.json \
--iam-account=dns-admin@${GCP_PROJECT}.iam.gserviceaccount.com \
--project=${GCP_PROJECT}

gcloud projects add-iam-policy-binding ${GCP_PROJECT} \
--member=serviceAccount:dns-admin@${GCP_PROJECT}.iam.gserviceaccount.com \
--role=roles/dns.admin

kubectl create secret generic cert-manager-credentials \
--from-file=./gcp-dns-admin.json \
--namespace=istio-system

# Handle certificate

CERT_REPO=https://raw.githubusercontent.com/jetstack/cert-manager

kubectl apply -f ${CERT_REPO}/release-0.9/deploy/manifests/00-crds.yaml

kubectl create namespace cert-manager

kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
#kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

# Replace temporarily with version 0.9.0 --version v0.7.0 \
helm repo add jetstack https://charts.jetstack.io && \
helm repo update && \
helm upgrade -i cert-manager \
--namespace cert-manager \
--version v0.9.0 \
jetstack/cert-manager

# Change project id in this file
kubectl apply -f ./letsencrypt-issuer.yaml

kubectl apply -f ./of-cert.yaml

# Check for saying "Certificate issued Successfully"
watch kubectl -n istio-system describe certificate istio-gateway

# Delete ingress gateway pods
kubectl -n istio-system delete pods -l istio=ingressgateway

# Verify that it was configured correctly
kubectl apply -f grafana-virtual-service.yaml

##################
## Spinnaker
##################
#########
# Method A - New way with Spinnaker for GCP
#########

kubectl create namespace spinnaker
kubectl label namespace spinnaker istio-injection=enabled

## Spinnaker for GCP is a new offering to ease spinnaker installs
## https://github.com/googlecloudplatform/spinnaker-for-gcp
## click "Open in Google Cloud Shell" to start.

## Follow onscreen instructions

PROJECT_ID=gke-istio-tut \
    ~/spinnaker-for-gcp/scripts/install/setup_properties.sh

## Edit the file to use your cluster name instead of export GKE_CLUSTER=$DEPLOYMENT_NAME
## Also make sure to set the region and zone your cluster is in.
cloudshell edit \
    ~/spinnaker-for-gcp/scripts/install/properties


~/spinnaker-for-gcp/scripts/install/setup.sh

#########
# Method B - Old way, manual
#########

gcloud iam service-accounts create  spinnaker-account \
    --display-name spinnaker-account

export SA_EMAIL=$(gcloud iam service-accounts list \
    --filter="displayName:spinnaker-account" \
    --format='value(email)')
export PROJECT=$(gcloud info --format='value(config.project)')

gcloud projects add-iam-policy-binding \
    $PROJECT --role roles/storage.admin --member serviceAccount:$SA_EMAIL

gcloud iam service-accounts keys create spinnaker-sa.json --iam-account $SA_EMAIL

gcloud beta pubsub topics create projects/$PROJECT/topics/gcr

gcloud beta pubsub subscriptions create gcr-triggers \
    --topic projects/${PROJECT}/topics/gcr

export SA_EMAIL=$(gcloud iam service-accounts list \
    --filter="displayName:spinnaker-account" \
    --format='value(email)')
gcloud beta pubsub subscriptions add-iam-policy-binding gcr-triggers \
    --role roles/pubsub.subscriber --member serviceAccount:$SA_EMAIL

## TODO: REMOVE THIS - gcloud source repos create demo

kubectl create clusterrolebinding --clusterrole=cluster-admin --serviceaccount=default:default spinnaker-admin

export PROJECT=$(gcloud info \
    --format='value(config.project)')
export BUCKET=$PROJECT-spinnaker-config
gsutil mb -c regional -l us-central1 gs://$BUCKET

export SA_JSON=$(cat spinnaker-sa.json)
export PROJECT=$(gcloud info --format='value(config.project)')
export BUCKET=$PROJECT-spinnaker-config
cat > spinnaker-config.yaml <<EOF
gcs:
  enabled: true
  bucket: $BUCKET
  project: $PROJECT
  jsonKey: '$SA_JSON'

dockerRegistries:
- name: gcr
  address: https://gcr.io
  username: _json_key
  password: '$SA_JSON'
  email: 1234@5678.com

# Disable minio as the default storage backend
minio:
  enabled: false

# Configure Spinnaker to enable GCP services
halyard:
  spinnakerVersion: 1.10.2
  image:
    tag: 1.12.0
  additionalScripts:
    create: true
    data:
      enable_gcs_artifacts.sh: |-
        \$HAL_COMMAND config artifact gcs account add gcs-$PROJECT --json-path /opt/gcs/key.json
        \$HAL_COMMAND config artifact gcs enable
      enable_pubsub_triggers.sh: |-
        \$HAL_COMMAND config pubsub google enable
        \$HAL_COMMAND config pubsub google subscription add gcr-triggers \
          --subscription-name gcr-triggers \
          --json-path /opt/gcs/key.json \
          --project $PROJECT \
          --message-format GCR
EOF

kubectl label namespace default istio-injection=enabled

./helm install -n cd stable/spinnaker -f spinnaker-config.yaml --timeout 600 \
    --version 1.1.6 --wait

# Have to edit spin-gate deployment manifest to use tcp readiness check
# https://github.com/spinnaker/spinnaker/issues/2765#issuecomment-397171924

# NOTE: do not put hyphens in the host field... It wont work

###############
# Final Touches
###############
## Expose spin-deck and spin-gate as a virtual service
## Set different domain names for the two of them. Save time and anguish 
## https://www.digitalocean.com/community/tutorials/how-to-set-up-a-cd-pipeline-with-spinnaker-on-digitalocean-kubernetes

gcloud container clusters get-credentials istio --zone us-central1-a --project gke-istio-tut  && kubectl exec -it spin-halyard-0 --namespace halyard -c halyard-daemon -- 
/bin/bash

hal config security api edit --override-base-url https://spinnaker-api.kubernetesclustertest.com
hal config security ui edit --override-base-url https://spinnaker.kubernetesclustertest.com

hal deploy apply

exit

kubectl apply -f spinnaker-deck-vs.yaml
kubectl apply -f spinnaker-gate-vs.yaml
kubectl apply -f spinnaker-rules.yaml

####################
## Deploying an app
#################### 

####################
# Wordpress
####################

####################
# Potential issues:
# oauth2: cannot fetch token: Post https://oauth2.googleapis.com/token
# - Fix by allowing access to gke apis for auth and metadata
# - https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/istio-manifests/whitelist-egress-googleapis.yaml
####################

kubectl label namespace default istio-injection=enabled

# May "fail" based on a timeout
gcloud sql instances create application-relational-datastore --tier=db-f1-micro --region=us-central1

gcloud sql users set-password root \
    --host=% --instance=application-relational-datastore --prompt-for-password

gcloud sql users create wordpress-user    --host=% --instance=application-relational-datastore --password='Test1234!'

kubectl create secret generic wordpress-db-credentials --from-literal='wordpress.db.username=wordpress-user' --from-literal='wordpress.db.password=Test1234!'

gcloud iam service-accounts create cloud-sql-account \
    --display-name cloud-sql-account

export SA_EMAIL=$(gcloud iam service-accounts list \
    --filter="displayName:cloud-sql-account" \
    --format='value(email)')
export PROJECT=$(gcloud info --format='value(config.project)')

gcloud projects add-iam-policy-binding \
    $PROJECT --role roles/editor --member serviceAccount:$SA_EMAIL

gcloud iam service-accounts keys create cloud-sql-sa.json --iam-account $SA_EMAIL

kubectl create secret generic cloudsql-oauth-credentials --from-file=credentials.json=cloud-sql-sa.json

# Make sure to enable cloud sql api
https://console.developers.google.com/apis/api/sqladmin.googleapis.com/overview

# Edit virtual service yaml file to list pulic ip to db
kubectl apply -f google-apis-vs.yaml

# Edit wordpress yaml file to include project url for cloud sql proxy
kubectl apply -f word-press.yaml

#####################
## Installing Jenkins
#####################

helm install -n jenkins stable/jenkins -f jenkins.yaml --wait --debug
kubectl apply -f jenkins-vs.yaml

# connect to Halyard container
gcloud container clusters get-credentials istio --zone us-central1-a --project gke-istio-tut  && kubectl exec -it spin-halyard-0 --namespace halyard -c halyard-daemon -- /bin/bash

export BASEURL=https://jenkins:8080
export USERNAME=admin

hal config ci jenkins enable
hal config ci jenkins master add my-jenkins-master \
    --address $BASEURL \
    --username $USERNAME \
    --password # password will be read from STDIN to avoid appearing
               # in your .bash_history

hal deploy apply

# Don't touch spin services directly through kubectl apply. 
# They have to be maanged by halyard and are finicky.

# 429 when igor tries to call Jenkins
# Make sure to delegate user access to Jenkins own user database
# Add any type of job to prevent 429 when getting job list back. 
# Source: https://github.com/spinnaker/spinnaker/issues/892

gcloud iam service-accounts create  jenkins-account \
    --display-name jenkins-account

export JENKINS_EMAIL=$(gcloud iam service-accounts list \
    --filter="displayName:jenkins-account" \
    --format='value(email)')
export PROJECT=$(gcloud info --format='value(config.project)')

gcloud projects add-iam-policy-binding \
    $PROJECT --role roles/source.reader  --member serviceAccount:$JENKINS_EMAIL

gcloud iam service-accounts keys create jenkins-sa.json --iam-account $JENKINS_EMAIL


